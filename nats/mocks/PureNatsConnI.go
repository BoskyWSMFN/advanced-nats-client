// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	context "context"

	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// PureNatsConnI is an autogenerated mock type for the PureNatsConnI type
type PureNatsConnI struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *PureNatsConnI) Close() {
	_m.Called()
}

// Drain provides a mock function with given fields:
func (_m *PureNatsConnI) Drain() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueSubscribe provides a mock function with given fields: _a0, _a1, _a2
func (_m *PureNatsConnI) QueueSubscribe(_a0 string, _a1 string, _a2 nats.MsgHandler) (*nats.Subscription, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *nats.Subscription
	if rf, ok := ret.Get(0).(func(string, string, nats.MsgHandler) *nats.Subscription); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, nats.MsgHandler) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *PureNatsConnI) RequestWithContext(_a0 context.Context, _a1 string, _a2 []byte) (*nats.Msg, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *nats.Msg
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) *nats.Msg); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Msg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *PureNatsConnI) Subscribe(_a0 string, _a1 nats.MsgHandler) (*nats.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *nats.Subscription
	if rf, ok := ret.Get(0).(func(string, nats.MsgHandler) *nats.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, nats.MsgHandler) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
